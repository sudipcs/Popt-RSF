# -*- coding: utf-8 -*-
"""RSF with our optimization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dGAiCAzdsqR9LQjOXqcjdZXpmHafIhXa
"""

pip install lifelines

import pandas as pd
import numpy as np
from lifelines.utils import concordance_index
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
import seaborn as sn
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

#Read the data file:
data = pd.read_csv("/content/covid.csv")
data.head()

#Organize the data:

data.loc[data.date_died == '9999-99-99', 'Death'] = 0
data.loc[data.date_died != '9999-99-99', 'Death'] = 1

data.head()

data=  data[['sex','pneumonia','age','diabetes','asthma','hypertension','other_disease','renal_chronic','tobacco','Duration', 'Death']]

X=  data[['sex','pneumonia','age','diabetes','asthma','hypertension','other_disease','renal_chronic','tobacco','Duration']]
y= data['Death']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0)

i=20
while(i<=1020):
  clf = RandomForestRegressor(n_estimators=i)
  clf.fit(X_train,y_train)
  y_pred = clf.predict(X_test)
  print("For no. of trees ",i)
  print(f'Concordance index: {concordance_index(y_test, y_pred)}')
  i=i+40

  #980 is the optimized n_estimators value

i=1
while(i<=50):
  clf = RandomForestRegressor(n_estimators=980, max_depth=i)
  clf.fit(X_train,y_train)
  y_pred = clf.predict(X_test)
  print("For Max Depth ",i)
  print(f'Concordance index: {concordance_index(y_test, y_pred)}')
  i=i+1
  #9 is the optimized max_depth value

i=2
while(i<=30):
  clf = RandomForestRegressor(n_estimators=980,max_depth=9,min_samples_split=i)
  clf.fit(X_train,y_train)
  y_pred = clf.predict(X_test)
  print("For Minimum Sample split ",i)
  print(f'Concordance index: {concordance_index(y_test, y_pred)}')
  i=i+1
  #21 is the optimized min_samples_split value

j=0.1
while(j<=0.999):
  clf = RandomForestRegressor(n_estimators=980,max_depth=9,min_samples_split=21,max_features=j)
  clf.fit(X_train,y_train)
  y_pred = clf.predict(X_test)
  print("For Max Features ",j)
  print(f'Concordance index: {concordance_index(y_test, y_pred)}')
  j=j + 0.02

  #0.46000000000000013 is the optimized max_features value

clf = RandomForestRegressor(n_estimators=980,max_depth=9,min_samples_split=21,max_features=0.46000000000000013)
clf.fit(X_train,y_train)
y_pred = clf.predict(X_test)
print("Optimization: ")
print(f'Concordance index: {concordance_index(y_test, y_pred)}')

def perf_measure(y_actual, y_hat):
    TP = 0
    FP = 0
    TN = 0
    FN = 0

    for i in range(len(y_hat)): 
        if y_actual[i]==y_hat[i]==1:
           TP += 1
        if y_hat[i]==1 and y_actual[i]!=y_hat[i]:
           FP += 1
        if y_actual[i]==y_hat[i]==0:
           TN += 1
        if y_hat[i]==0 and y_actual[i]!=y_hat[i]:
           FN += 1

    return(TP, FP, TN, FN)

a = np.where(y_test < 0.48, 0,1)
b = np.where(y_pred < 0.48, 0,1)

tp,fp,tn,fn=perf_measure(a,b)
acc=(tp+tn)/(tp+fp+tn+fn)
acc

mse = mean_squared_error(y_test, y_pred)
print("MSE: ", mse)
print("RMSE: ",np.sqrt(mse))

auc = roc_auc_score(y_test,y_pred)
print('AUC: ', auc)

fpr, tpr, thresholds = roc_curve(y_test, y_pred)

def plot_roc_curve(fpr, tpr):
    plt.plot(fpr, tpr, color='orange', label='ROC')
    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend()
    plt.show()

plot_roc_curve(fpr, tpr)

featureImportances = pd.Series(clf.feature_importances_)
print(featureImportances)

sn.barplot(x=featureImportances, y=X.columns)
plt.xlabel('Importance')
plt.ylabel('Features')
plt.show()

"""THE DEFAULT MODEL OF RSF MODEL IS FITTED NEXT.
THE PERFORMANCE OF THE DEFAULT MODEL IS MEASURED IN C-INDEX, ACCURACY AND THE ERROR OF THE MODEL IS CALCULATED USING MEAN SQUARED ERROR.
"""

clr = RandomForestRegressor()
clr.fit(X_train,y_train)
y_pred1 = clr.predict(X_test)
print("Optimization: ")
print(f'Concordance index: {concordance_index(y_test, y_pred1)}')

a = np.where(y_test < 0.48, 1,0)
b = np.where(y_pred1 < 0.48, 1,0)
tp,fp,tn,fn=perf_measure(a,b)
acc=(tp+tn)/(tp+fp+tn+fn)
acc

mse = mean_squared_error(y_test, y_pred1)
print("MSE: ", mse)
print("RMSE: ",np.sqrt(mse))

auc = roc_auc_score(y_test,y_pred1)
print('AUC: ', auc)

fpr1, tpr1, thresholds = roc_curve(y_test, y_pred1)

plot_roc_curve(fpr1, tpr1)

inp=[1,0,1,1]
op=[0,1,0,1]
tp,fp,tn,fn=perf_measure(inp,op)
tp,fp,tn,fn
#acc=(tp+tn)/(tp+fp+tn+fn)
#acc

inp=[1,0,1,1]
op=[1,1,0,1]
tp,fp,tn,fn=perf_measure(inp,op)
tp,fp,tn,fn

inp=[1,0,0,1]
op=[0,1,0,1]
tp,fp,tn,fn=perf_measure(inp,op)
tp,fp,tn,fn

inp=[1,0,0,0]
op=[0,1,0,0]
tp,fp,tn,fn=perf_measure(inp,op)
tp,fp,tn,fn